;# **************************************************************************** #
;#                                                                              #
;#                                                         :::      ::::::::    #
;#    ft_cat.s                                           :+:      :+:    :+:    #
;#                                                     +:+ +:+         +:+      #
;#    By: vlobunet <marvin@42.fr>                    +#+  +:+       +#+         #
;#                                                 +#+#+#+#+#+   +#+            #
;#    Created: 2020/02/15 12:23:59 by vlobunet          #+#    #+#              #
;#    Updated: 2020/02/15 12:24:01 by vlobunet         ###   ########.fr        #
;#                                                                              #
;# **************************************************************************** #

%define CALL(n)     0x2000000 | n
%define WRITE       4
%define READ        3

%define	BUFF	2048

section .bss
	buff  : resb BUFF			; переменная для хранения
	.size   : equ $ - buff		; устанавливаем размер буфера
	
section .text
	global  _ft_cat
	
_ft_cat:
	push	rbp
	mov		rbp, rsp			; как обычно сохраняем и устанавливаем вершину стекового фрейма
	push	rdi                 ; сохраняем указатель для повторного обращения

_loop:
	pop		rdi					; каждый раз получаем указатель обратно из стека
	
	mov		rax, CALL(READ)		; готовим все для чтения из файла в буфер
	lea		rsi, [rel buff]		; ефективный адрес буфера
	mov		rdx, buff.size
	syscall						; читаем
	push	rdi                 ; так как указатель на дескриптор нам не нужен сохраняем его в стек
	cmp		rax, 0x0            ; сравниваем значение счетчика с 0
	jle		_return				; если 0 значит конец файла. файл пуст
	mov		rdx, rax			; готовим все для вывода из буфера на екран
	mov		rax, CALL(WRITE)
	mov		rdi, 1
	lea		rsi, [rel buff]
	syscall						; выводим на екран
	jmp		_loop				; и так делаем пока не закончится файл
	
_return:
	pop		rdi                 ; возвращаем из стека указатель
	xor		rax, rax            ; обнуляем возвращаемое значение
	
	mov		rsp, rbp			; восстанавливаем адрес возврата
	pop		rbp
	ret
